<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eco Kids Super</title>
    <style>
        :root {
            --primary: #4CAF50;
            --secondary: #FFC107;
            --danger: #F44336;
            --water: #2196F3;
            --energy: #FF9800;
            --background: #121212;
            --recycle: #8BC34A;
            --organic: #795548;
            --trash: #607D8B;
            --text: #E0E0E0;
            --card-bg: #1E1E1E;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Fredoka One', cursive, sans-serif;
            background-color: var(--background);
            color: var(--text);
            overflow-x: hidden;
        }
        
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0px); }
        }
        
        @keyframes shake {
            0% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            50% { transform: translateX(5px); }
            75% { transform: translateX(-5px); }
            100% { transform: translateX(0); }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        @keyframes slideIn {
            from { transform: translateX(-100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes ecoTipAnimation {
            0% { transform: scale(0.8); opacity: 0; }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
        }
        
        .screen {
            background-color: var(--card-bg);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            margin-bottom: 20px;
            position: relative;
            overflow: hidden;
            min-height: 500px;
            transition: transform 0.3s;
            border: 1px solid #333;
        }
        
        .screen::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 10px;
            background: linear-gradient(90deg, var(--water), var(--energy), var(--recycle));
        }
        
        .hidden {
            display: none !important;
        }
        
        h1, h2, h3 {
            color: var(--primary);
            text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.3);
        }
        
        h1 {
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5rem;
        }
        
        h2 {
            margin: 15px 0;
            font-size: 1.8rem;
        }
        
        .subtitle {
            text-align: center;
            color: #aaa;
            margin-bottom: 30px;
            font-size: 1.2rem;
        }
        
        /* Tela Inicial */
        #start-screen {
            text-align: center;
            animation: pulse 2s infinite;
        }
        
        .logo {
            font-size: 4rem;
            margin: 20px 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .logo img {
            width: 80px;
            height: 80px;
            margin: 0 10px;
            animation: float 3s infinite ease-in-out;
            filter: drop-shadow(0 0 5px rgba(0,0,0,0.5));
        }
        
        /* Personagens */
        .characters {
            display: flex;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
            margin: 30px 0;
        }
        
        .character {
            background-color: var(--card-bg);
            border-radius: 15px;
            padding: 20px;
            width: 180px;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            border: 3px solid transparent;
            text-align: center;
            color: var(--text);
        }
        
        .character:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 20px rgba(0, 0, 0, 0.3);
            border-color: var(--primary);
        }
        
        .character img {
            width: 100px;
            height: 100px;
            object-fit: contain;
            margin-bottom: 10px;
            animation: float 3s infinite ease-in-out;
        }
        
        .character h3 {
            color: var(--primary);
            margin-bottom: 5px;
        }
        
        /* Jogo Principal */
        .game-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            background-color: #252525;
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #333;
        }
        
        .stats {
            display: flex;
            gap: 20px;
        }
        
        .stat {
            display: flex;
            align-items: center;
            gap: 5px;
            color: var(--text);
        }
        
        .hearts {
            display: flex;
            gap: 5px;
        }
        
        .heart {
            color: var(--danger);
            font-size: 1.5rem;
            transition: transform 0.3s;
        }
        
        .heart.lost {
            transform: scale(0);
            opacity: 0;
        }
        
        .points {
            color: var(--secondary);
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        .mission-container {
            background-color: #252525;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            border-left: 5px solid var(--primary);
            position: relative;
            overflow: hidden;
            border: 1px solid #333;
        }
        
        .mission-text {
            font-weight: bold;
            color: var(--primary);
        }
        
        .villain-name {
            color: var(--danger);
            font-weight: bold;
        }
        
        .game-area {
            position: relative;
            height: 300px;
            background-color: #252525;
            border-radius: 15px;
            overflow: hidden;
            margin-bottom: 20px;
            border: 3px dashed var(--primary);
        }
        
        #hero {
            position: absolute;
            width: 80px;
            height: 80px;
            bottom: 20px;
            left: 50px;
            z-index: 10;
            transition: left 0.3s;
            filter: drop-shadow(0 0 5px rgba(0,0,0,0.5));
        }
        
        #villain {
            position: absolute;
            width: 70px;
            height: 70px;
            top: 50px;
            right: -100px;
            z-index: 5;
            transition: right 0.5s;
            filter: drop-shadow(0 0 5px rgba(0,0,0,0.5));
        }
        
        .game-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        /* Botões */
        .btn {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: all 0.3s;
            box-shadow: 0 4px 0 rgba(0, 0, 0, 0.2);
            position: relative;
            overflow: hidden;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 0 rgba(0, 0, 0, 0.2);
        }
        
        .btn:active {
            transform: translateY(2px);
            box-shadow: 0 2px 0 rgba(0, 0, 0, 0.2);
        }
        
        .btn-water {
            background-color: var(--water);
        }
        
        .btn-energy {
            background-color: var(--energy);
        }
        
        .btn-danger {
            background-color: var(--danger);
        }
        
        .btn-recycle {
            background-color: var(--recycle);
        }
        
        .btn-organic {
            background-color: var(--organic);
        }
        
        .btn-trash {
            background-color: var(--trash);
        }
        
        /* Questionário */
        .quiz-question {
            font-size: 1.3rem;
            margin: 20px 0;
            color: var(--primary);
            font-weight: bold;
            text-align: center;
        }
        
        .quiz-fact {
            font-style: italic;
            color: #aaa;
            margin: 10px 0;
            text-align: center;
        }
        
        .options {
            display: grid;
            grid-template-columns: 1fr;
            gap: 10px;
            margin: 30px 0;
        }
        
        .option {
            background-color: #252525;
            border: 2px solid #444;
            border-radius: 10px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s;
            text-align: left;
            font-size: 1.1rem;
            position: relative;
            overflow: hidden;
            color: var(--text);
        }
        
        .option:hover {
            border-color: var(--primary);
            background-color: #333;
            transform: translateX(5px);
        }
        
        .option.correct {
            background-color: rgba(76, 175, 80, 0.2);
            border-color: var(--primary);
            color: var(--primary);
        }
        
        .option.incorrect {
            background-color: rgba(244, 67, 54, 0.2);
            border-color: var(--danger);
            color: var(--danger);
        }
        
        .quiz-feedback {
            font-size: 1.2rem;
            font-weight: bold;
            margin: 20px 0;
            min-height: 30px;
            text-align: center;
            padding: 15px;
            border-radius: 10px;
        }
        
        .correct {
            color: var(--primary);
            background-color: rgba(76, 175, 80, 0.2);
        }
        
        .incorrect {
            color: var(--danger);
            background-color: rgba(244, 67, 54, 0.2);
        }
        
        .explanation {
            background-color: #252525;
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid var(--primary);
            font-size: 1rem;
            display: none;
            color: var(--text);
        }
        
        /* Mini Games */
        .mini-game-container {
            position: relative;
            height: 400px;
            background-color: #252525;
            border-radius: 15px;
            overflow: hidden;
            margin: 20px 0;
            border: 1px solid #333;
        }
        
        /* Feche a Torneira */
        .faucet {
            position: absolute;
            width: 60px;
            height: 60px;
            cursor: pointer;
            transition: transform 0.1s;
            z-index: 2;
            filter: drop-shadow(0 0 3px rgba(0,0,0,0.5));
        }
        
        .faucet:hover {
            transform: scale(1.1);
        }
        
        .faucet-closed {
            filter: grayscale(100%) brightness(0.7) drop-shadow(0 0 3px rgba(0,0,0,0.5));
            opacity: 0.7;
        }
        
        .water-drop {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: var(--water);
            border-radius: 50%;
            z-index: 1;
            filter: drop-shadow(0 0 2px rgba(33, 150, 243, 0.7));
        }
        
        /* Corrida Solar */
        #runner {
            position: absolute;
            width: 70px;
            height: 70px;
            bottom: 20px;
            left: 50px;
            z-index: 10;
            filter: drop-shadow(0 0 5px rgba(0,0,0,0.5));
        }
        
        .obstacle {
            position: absolute;
            width: 60px;
            height: 60px;
            z-index: 5;
            filter: drop-shadow(0 0 3px rgba(0,0,0,0.5));
        }
        
        .energy {
            position: absolute;
            width: 40px;
            height: 40px;
            z-index: 5;
            animation: pulse 1s infinite;
            filter: drop-shadow(0 0 5px rgba(255, 235, 59, 0.7));
        }
        
        /* Separe o Lixo */
        .trash-bins {
            display: flex;
            justify-content: space-around;
            position: absolute;
            bottom: 20px;
            width: 100%;
            z-index: 2;
        }
        
        .trash-bin {
            width: 80px;
            height: 100px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: bottom;
            position: relative;
            transition: transform 0.3s;
            filter: drop-shadow(0 0 3px rgba(0,0,0,0.5));
        }
        
        .trash-bin.highlight {
            transform: translateY(-10px);
            animation: pulse 1s infinite;
        }
        
        .trash-bin::after {
            content: attr(data-type);
            position: absolute;
            bottom: -20px;
            left: 0;
            right: 0;
            text-align: center;
            font-weight: bold;
            text-transform: capitalize;
            color: var(--primary);
        }
        
        .trash-items {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 120px;
        }
        
        .trash-item {
            position: absolute;
            width: 50px;
            height: 50px;
            background-size: contain;
            background-repeat: no-repeat;
            cursor: grab;
            z-index: 3;
            transition: transform 0.2s;
            filter: drop-shadow(2px 2px 2px rgba(0,0,0,0.5));
        }
        
        .trash-item:active {
            cursor: grabbing;
            transform: scale(1.1);
            z-index: 4;
        }
        
        /* Barra de Progresso */
        .progress-container {
            width: 100%;
            height: 20px;
            background-color: #333;
            border-radius: 10px;
            margin: 20px 0;
            overflow: hidden;
        }
        
        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--water), var(--energy), var(--recycle));
            border-radius: 10px;
            width: 0%;
            transition: width 0.5s;
            position: relative;
        }
        
        .progress-bar::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(
                -45deg,
                rgba(255, 255, 255, 0.1) 25%,
                transparent 25%,
                transparent 50%,
                rgba(255, 255, 255, 0.1) 50%,
                rgba(255, 255, 255, 0.1) 75%,
                transparent 75%,
                transparent
            );
            background-size: 20px 20px;
            animation: move 1s linear infinite;
        }
        
        @keyframes move {
            0% { background-position: 0 0; }
            100% { background-position: 20px 20px; }
        }
        
        /* Medalhas */
        .badges {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 30px 0;
            flex-wrap: wrap;
        }
        
        .badge {
            width: 80px;
            height: 80px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            opacity: 0.3;
            transition: all 0.3s;
            position: relative;
            filter: drop-shadow(0 3px 5px rgba(0, 0, 0, 0.5));
        }
        
        .badge.earned {
            opacity: 1;
            animation: pulse 2s infinite;
        }
        
        .badge::after {
            content: attr(title);
            position: absolute;
            bottom: -25px;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 0.8rem;
            color: var(--primary);
            font-weight: bold;
        }
        
        /* Tela de Resultado */
        #result-screen {
            text-align: center;
        }
        
        #result-title {
            font-size: 2.5rem;
            margin: 20px 0;
            color: var(--primary);
        }
        
        #result-message {
            font-size: 1.2rem;
            margin-bottom: 30px;
        }
        
        .final-badges {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin: 40px 0;
            flex-wrap: wrap;
        }
        
        .final-badge {
            width: 100px;
            height: 100px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            filter: drop-shadow(0 5px 10px rgba(0, 0, 0, 0.5));
            position: relative;
        }
        
        .final-badge::after {
            content: attr(title);
            position: absolute;
            bottom: -25px;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 0.9rem;
            color: var(--primary);
            font-weight: bold;
        }
        
        /* Efeitos Especiais */
        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: var(--secondary);
            opacity: 0;
            z-index: 100;
        }
        
        .water-wave {
            position: absolute;
            width: 100%;
            height: 20px;
            background: url('data:image/svg+xml;utf8,<svg viewBox="0 0 1200 120" xmlns="http://www.w3.org/2000/svg"><path d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z" fill="%232196F3" opacity=".25"/><path d="M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z" fill="%232196F3" opacity=".5"/><path d="M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z" fill="%232196F3"/></svg>');
            background-size: cover;
            bottom: 0;
            left: 0;
            z-index: 1;
            animation: wave 10s linear infinite;
        }
        
        @keyframes wave {
            0% { transform: translateX(0); }
            100% { transform: translateX(-50%); }
        }
        
        /* Timer Circular */
        .timer-container {
            width: 60px;
            height: 60px;
            position: relative;
            margin: 0 auto;
        }
        
        .timer-circle {
            width: 100%;
            height: 100%;
            transform: rotate(-90deg);
        }
        
        .timer-bg {
            fill: none;
            stroke: #333;
            stroke-width: 6;
        }
        
        .timer-progress {
            fill: none;
            stroke: var(--primary);
            stroke-width: 6;
            stroke-linecap: round;
            transition: stroke-dashoffset 1s linear;
        }
        
        .timer-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--primary);
        }
        
        /* Eco Tips Animation */
        .eco-tips-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
            z-index: 2000;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .eco-tip {
            background-color: var(--card-bg);
            border-radius: 20px;
            padding: 30px;
            max-width: 80%;
            text-align: center;
            animation: ecoTipAnimation 0.5s forwards;
            border: 2px solid var(--primary);
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
        }
        
        .eco-tip img {
            width: 100px;
            height: 100px;
            margin-bottom: 20px;
            animation: float 3s infinite ease-in-out;
        }
        
        .eco-tip h3 {
            color: var(--primary);
            margin-bottom: 15px;
            font-size: 1.5rem;
        }
        
        .eco-tip p {
            margin-bottom: 20px;
            font-size: 1.1rem;
            color: var(--text);
        }
        
        .eco-tip-btn {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: all 0.3s;
        }
        
        .eco-tip-btn:hover {
            transform: scale(1.05);
        }
        
        /* Video Container */
        .video-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
            z-index: 2000;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .video-content {
            width: 90%;
            max-width: 800px;
            background-color: var(--card-bg);
            border-radius: 20px;
            padding: 20px;
            text-align: center;
        }
        
        .video-wrapper {
            position: relative;
            padding-bottom: 56.25%; /* 16:9 */
            height: 0;
            margin: 20px 0;
        }
        
        .video-wrapper iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 10px;
        }
        
        /* Certificado */
        .certificate-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
            z-index: 2000;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .certificate {
            width: 90%;
            max-width: 800px;
            background-color: white;
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            color: #333;
            position: relative;
            box-shadow: 0 0 30px rgba(0,0,0,0.5);
            border: 10px solid #4CAF50;
        }
        
        .certificate h2 {
            color: #4CAF50;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .certificate h3 {
            color: #2196F3;
            font-size: 1.8rem;
            margin-bottom: 30px;
        }
        
        .certificate p {
            font-size: 1.2rem;
            margin: 10px 0;
        }
        
        .certificate .name {
            font-size: 2rem;
            font-weight: bold;
            color: #FF9800;
            margin: 20px 0;
            border-bottom: 2px dashed #4CAF50;
            padding-bottom: 10px;
            display: inline-block;
        }
        
        .certificate .date {
            font-style: italic;
            margin-top: 30px;
        }
        
        .certificate .badges {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 30px 0;
            flex-wrap: wrap;
        }
        
        .certificate .badge {
            width: 60px;
            height: 60px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }
        
        .certificate .seal {
            position: absolute;
            width: 100px;
            height: 100px;
            bottom: 20px;
            right: 20px;
            opacity: 0.8;
        }
        
        /* Responsividade */
        @media (max-width: 600px) {
            .container {
                padding: 10px;
            }
            
            .screen {
                padding: 15px;
                min-height: auto;
            }
            
            .characters {
                gap: 15px;
            }
            
            .character {
                width: 140px;
                padding: 15px;
            }
            
            .game-header {
                flex-direction: column;
                gap: 10px;
            }
            
            .game-controls {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
            }
            
            .game-area {
                height: 250px;
            }
            
            .mini-game-container {
                height: 350px;
            }
            
            .eco-tip {
                max-width: 90%;
                padding: 20px;
            }
            
            .eco-tip img {
                width: 80px;
                height: 80px;
            }
            
            .certificate {
                padding: 15px;
            }
            
            .certificate h2 {
                font-size: 1.8rem;
            }
            
            .certificate h3 {
                font-size: 1.3rem;
            }
            
            .certificate .name {
                font-size: 1.5rem;
            }
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <div class="container">
        <!-- Tela Inicial -->
        <div class="screen" id="start-screen">
            <div class="logo">
                <img src="https://cdn-icons-png.flaticon.com/512/3213/3213114.png" alt="Planeta Terra">
                <span>Eco Kids Super</span>
                <img src="https://cdn-icons-png.flaticon.com/512/3213/3213114.png" alt="Planeta Terra">
            </div>
            <h1>Eco Kids Super</h1>
            <p class="subtitle">Salve o planeta enfrentando vilões e completando desafios ecológicos!</p>
            
            <div class="badges">
                <div class="badge" id="water-badge" title="Guardião das Águas"></div>
                <div class="badge" id="energy-badge" title="Mestre da Energia"></div>
                <div class="badge" id="recycle-badge" title="Reciclador Expert"></div>
                <div class="badge" id="hero-badge" title="Herói do Planeta"></div>
            </div>
            
            <button class="btn" onclick="showCharacterSelection()">Começar Jogo</button>
            <button class="btn btn-energy" onclick="showInstructions()">Como Jogar</button>
            <button class="btn btn-water" onclick="showEcoTips()">Dicas Ecológicas</button>
            <button class="btn btn-recycle" onclick="showEducationalVideos()">Vídeos Educativos</button>
        </div>
        
        <!-- Tela de Instruções -->
        <div class="screen hidden" id="instructions-screen">
            <h2>Como Jogar</h2>
            <div style="text-align: left; margin: 20px 0;">
                <p><strong>Objetivo:</strong> Complete todas as missões para se tornar um Herói do Planeta!</p>
                
                <h3 style="color: var(--water); margin-top: 20px;">💧 Missões de Água</h3>
                <ul style="margin: 10px 0 20px 20px;">
                    <li>Feche torneiras vazando</li>
                    <li>Conserte vazamentos</li>
                    <li>Reduza o tempo no banho</li>
                </ul>
                
                <h3 style="color: var(--energy);">⚡ Missões de Energia</h3>
                <ul style="margin: 10px 0 20px 20px;">
                    <li>Troque lâmpadas por LEDs</li>
                    <li>Use energia solar</li>
                    <li>Desligue aparelhos em standby</li>
                </ul>
                
                <h3 style="color: var(--recycle);">♻️ Missões de Reciclagem</h3>
                <ul style="margin: 10px 0 20px 20px;">
                    <li>Separe o lixo corretamente</li>
                    <li>Reduza o consumo de plástico</li>
                    <li>Reutilize materiais</li>
                </ul>
                
                <h3 style="color: var(--primary);">🎮 Mini Games</h3>
                <ul style="margin: 10px 0 20px 20px;">
                    <li><strong>Feche a Torneira:</strong> Clique nas torneiras antes que a água seja desperdiçada</li>
                    <li><strong>Corrida Solar:</strong> Colete energia solar e evite os vilões da poluição</li>
                    <li><strong>Separe o Lixo:</strong> Arraste os resíduos para as lixeiras corretas</li>
                </ul>
                
                <h3 style="color: var(--secondary);">📚 Questionários</h3>
                <p style="margin: 10px 0 20px 20px;">Teste seus conhecimentos sobre sustentabilidade para ganhar pontos extras!</p>
                
                <h3 style="color: var(--secondary);">🏆 Medalhas</h3>
                <p style="margin: 10px 0 20px 20px;">Conquiste medalhas ao completar desafios e ganhar pontos!</p>
            </div>
            <button class="btn" onclick="hideInstructions()">Voltar</button>
        </div>
        
        <!-- Tela de Seleção de Personagem -->
        <div class="screen hidden" id="character-selection">
            <h2>Escolha seu Eco Herói</h2>
            <p class="subtitle">Cada herói tem habilidades especiais para diferentes missões</p>
            
            <div class="characters">
                <div class="character" onclick="selectCharacter('Gotinha')">
                    <img src="https://cdn-icons-png.flaticon.com/512/3430/3430255.png" alt="Gotinha">
                    <h3>Gotinha</h3>
                    <p>💧 Especialista em água</p>
                    <p>+2 pontos em missões de água</p>
                    <p>+1 vida em mini games de água</p>
                </div>
                <div class="character" onclick="selectCharacter('Solarzinho')">
                    <img src="https://cdn-icons-png.flaticon.com/512/3659/3659898.png" alt="Solarzinho">
                    <h3>Solarzinho</h3>
                    <p>☀️ Especialista em energia</p>
                    <p>+2 pontos em missões de energia</p>
                    <p>+1 vida em mini games de energia</p>
                </div>
                <div class="character" onclick="selectCharacter('Reciclinho')">
                    <img src="https://cdn-icons-png.flaticon.com/512/2553/2553183.png" alt="Reciclinho">
                    <h3>Reciclinho</h3>
                    <p>♻️ Especialista em reciclagem</p>
                    <p>+2 pontos em missões de reciclagem</p>
                    <p>+10s em mini games de reciclagem</p>
                </div>
            </div>
            
            <button class="btn" onclick="showStartScreen()">Voltar</button>
        </div>
        
        <!-- Tela do Jogo Principal -->
        <div class="screen hidden" id="game-screen">
            <div class="game-header">
                <div class="stats">
                    <div class="stat">
                        <span>🌟</span>
                        <span class="points" id="points">0</span>
                    </div>
                    <div class="stat">
                        <span>❤️</span>
                        <div class="hearts" id="hearts">
                            <span class="heart">❤️</span>
                            <span class="heart">❤️</span>
                            <span class="heart">❤️</span>
                        </div>
                    </div>
                </div>
                <div class="stat">
                    <span>🏆</span>
                    <span id="level">Nível 1</span>
                </div>
                <div class="stat">
                    <span>👤</span>
                    <span id="character-name"></span>
                </div>
            </div>
            
            <div class="mission-container">
                <p>Missão <span id="mission-number">1</span>/<span id="total-missions">6</span>:</p>
                <p class="mission-text" id="mission">Conserte o vazamento na escola!</p>
                <p>Vilão: <span class="villain-name" id="villain-name">Desperdício</span></p>
                <div class="water-wave"></div>
            </div>
            
            <div class="progress-container">
                <div class="progress-bar" id="progress-bar"></div>
            </div>
            
            <div class="game-area">
                <img id="hero" src="" alt="Herói">
                <img id="villain" src="" alt="Vilão">
            </div>
            
            <div class="game-controls">
                <button class="btn" id="action-btn" onclick="completeMission()">Agir!</button>
                <button class="btn btn-energy" onclick="showQuiz()">Questionário</button>
                <button class="btn btn-water" onclick="showMiniGamesMenu()">Mini Games</button>
                <button class="btn btn-recycle" onclick="showEducationalVideos()">Vídeos</button>
            </div>
        </div>
        
        <!-- Tela de Questionário -->
        <div class="screen hidden" id="quiz-screen">
            <h2>📚 Teste Seu Conhecimento</h2>
            <p class="quiz-question" id="quiz-question">Quanto tempo deve durar um banho sustentável?</p>
            <p class="quiz-fact" id="quiz-fact"></p>
            
            <div class="options" id="quiz-options">
                <!-- Opções serão preenchidas por JavaScript -->
            </div>
            
            <div class="quiz-feedback" id="quiz-feedback"></div>
            <div class="explanation" id="quiz-explanation"></div>
            
            <button class="btn" id="next-question-btn" onclick="showNextQuestion()" style="display: none;">Próxima Pergunta</button>
            <button class="btn" onclick="returnToGame()">Voltar ao Jogo</button>
        </div>
        
        <!-- Menu de Mini Games -->
        <div class="screen hidden" id="mini-games-menu">
            <h2>🎮 Mini Games</h2>
            <p>Complete os desafios para ganhar pontos extras!</p>
            
            <div class="game-controls" style="margin-top: 30px;">
                <button class="btn btn-water" onclick="startMiniGame('faucet')">
                    💧 Feche a Torneira
                </button>
                <button class="btn btn-energy" onclick="startMiniGame('solar-runner')">
                    ☀️ Corrida Solar
                </button>
                <button class="btn btn-recycle" onclick="startMiniGame('recycle')">
                    ♻️ Separe o Lixo
                </button>
                <button class="btn" onclick="returnToGame()">
                    Voltar ao Jogo
                </button>
            </div>
        </div>
        
        <!-- Mini Game 1: Feche a Torneira -->
        <div class="screen hidden" id="faucet-game">
            <h2>💧 Feche a Torneira!</h2>
            <p>Clique nas torneiras antes que o vilão Desperdício as deixe abertas!</p>
            
            <div style="display: flex; justify-content: space-between; margin: 15px 0;">
                <div>
                    <p>Torneiras fechadas: <strong id="faucets-closed">0</strong></p>
                    <p>Vidas: <span id="faucet-lives">3</span> ❤️</p>
                </div>
                <div>
                    <div class="timer-container">
                        <svg class="timer-circle" viewBox="0 0 36 36">
                            <path class="timer-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"/>
                            <path class="timer-progress" id="faucet-timer-path" stroke-dasharray="100, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"/>
                        </svg>
                        <div class="timer-text" id="faucet-time">30</div>
                    </div>
                    <p>Nível: <strong id="faucet-level">1</strong></p>
                </div>
            </div>
            
            <div class="mini-game-container" id="faucet-container">
                <!-- Torneiras serão adicionadas aqui -->
            </div>
            
            <button class="btn" onclick="endMiniGame()">Voltar</button>
        </div>
        
        <!-- Mini Game 2: Corrida Solar -->
        <div class="screen hidden" id="solar-runner-game">
            <h2>☀️ Corrida Solar</h2>
            <p>Use as setas do teclado (← →) para coletar energia e evitar os vilões!</p>
            
            <div style="display: flex; justify-content: space-between; margin: 15px 0;">
                <div>
                    <p>Energia: <strong id="energy-collected">0</strong> ☀️</p>
                    <p>Vidas: <span id="runner-lives">3</span> ❤️</p>
                </div>
                <div>
                    <div class="timer-container">
                        <svg class="timer-circle" viewBox="0 0 36 36">
                            <path class="timer-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"/>
                            <path class="timer-progress" id="runner-timer-path" stroke-dasharray="100, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"/>
                        </svg>
                        <div class="timer-text" id="runner-time">30</div>
                    </div>
                    <p>Velocidade: <strong id="runner-speed">1</strong>x</p>
                </div>
            </div>
            
            <div class="mini-game-container" id="solar-runner">
                <img id="runner" src="https://cdn-icons-png.flaticon.com/512/3652/3652191.png" alt="Corredor">
                <!-- Obstáculos e energia serão adicionados aqui -->
            </div>
            
            <button class="btn" onclick="endMiniGame()">Voltar</button>
        </div>
        
        <!-- Mini Game 3: Separe o Lixo -->
        <div class="screen hidden" id="recycle-game">
            <h2>♻️ Separe o Lixo</h2>
            <p>Arraste os resíduos para as lixeiras corretas antes do tempo acabar!</p>
            
            <div style="display: flex; justify-content: space-between; margin: 15px 0;">
                <div>
                    <p>Acertos: <strong id="recycle-score">0</strong> ✅</p>
                    <p>Erros: <strong id="recycle-errors">0</strong> ❌</p>
                </div>
                <div>
                    <div class="timer-container">
                        <svg class="timer-circle" viewBox="0 0 36 36">
                            <path class="timer-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"/>
                            <path class="timer-progress" id="recycle-timer-path" stroke-dasharray="100, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"/>
                        </svg>
                        <div class="timer-text" id="recycle-time">60</div>
                    </div>
                    <p>Nível: <strong id="recycle-level">1</strong></p>
                </div>
            </div>
            
            <div class="mini-game-container">
                <div class="trash-items" id="trash-items-container">
                    <!-- Lixo será adicionado aqui -->
                </div>
                
                <div class="trash-bins">
                    <div class="trash-bin" id="organic-bin" data-type="orgânico" 
                         style="background-image: url('https://cdn-icons-png.flaticon.com/512/4626/4626723.png')"></div>
                    <div class="trash-bin" id="recycle-bin" data-type="reciclável" 
                         style="background-image: url('https://cdn-icons-png.flaticon.com/512/2553/2553183.png')"></div>
                    <div class="trash-bin" id="trash-bin" data-type="lixo" 
                         style="background-image: url('https://cdn-icons-png.flaticon.com/512/484/484611.png')"></div>
                </div>
            </div>
            
            <button class="btn" onclick="endMiniGame()">Voltar</button>
        </div>
        
        <!-- Tela de Resultado -->
        <div class="screen hidden" id="result-screen">
            <h2 id="result-title">🏆 Parabéns!</h2>
            <p id="result-message">Você completou todas as missões e salvou o planeta!</p>
            
            <div style="margin: 30px 0;">
                <p style="font-size: 1.5rem;">Pontuação Final: <strong id="final-points">0</strong> 🌟</p>
                <p style="font-size: 1.2rem;">Nível Alcançado: <strong id="final-level">1</strong></p>
                <p style="font-size: 1.2rem;">Missões Completas: <strong id="final-missions">0</strong>/6</p>
            </div>
            
            <h3>Medalhas Conquistadas:</h3>
            <div class="final-badges" id="final-badges">
                <!-- Medalhas serão adicionadas aqui -->
            </div>
            
            <button class="btn" onclick="showCertificate()">Ver Certificado</button>
            <button class="btn" onclick="restartGame()">Jogar Novamente</button>
        </div>
    </div>

    <!-- Eco Tips Animation -->
    <div class="eco-tips-container hidden" id="eco-tips-container">
        <div class="eco-tip hidden" id="water-tip">
            <img src="https://cdn-icons-png.flaticon.com/512/3430/3430255.png" alt="Água">
            <h3>💧 Dicas para Economizar Água</h3>
            <p>1. Feche a torneira enquanto escova os dentes - economiza até 12 litros!</p>
            <p>2. Tome banhos curtos de 5 minutos - economiza 90 litros por banho!</p>
            <p>3. Conserte vazamentos - uma torneira pingando desperdiça 1.000 litros por mês!</p>
            <button class="eco-tip-btn" onclick="showNextTip('energy-tip')">Próxima Dica</button>
        </div>
        
        <div class="eco-tip hidden" id="energy-tip">
            <img src="https://cdn-icons-png.flaticon.com/512/3659/3659898.png" alt="Energia">
            <h3>⚡ Dicas para Economizar Energia</h3>
            <p>1. Troque lâmpadas por LEDs - economiza até 80% de energia!</p>
            <p>2. Desligue aparelhos da tomada - modo standby gasta energia!</p>
            <p>3. Use a luz natural durante o dia - abra as cortinas e janelas!</p>
            <button class="eco-tip-btn" onclick="showNextTip('recycle-tip')">Próxima Dica</button>
        </div>
        
        <div class="eco-tip hidden" id="recycle-tip">
            <img src="https://cdn-icons-png.flaticon.com/512/2553/2553183.png" alt="Reciclagem">
            <h3>♻️ Dicas para Reciclar Melhor</h3>
            <p>1. Separe o lixo em orgânico, reciclável e rejeitos!</p>
            <p>2. Lave embalagens antes de reciclar - evita contaminação!</p>
            <p>3. Reutilize potes e embalagens antes de descartar!</p>
            <button class="eco-tip-btn" onclick="hideEcoTips()">Entendi!</button>
        </div>
    </div>

    <!-- Vídeos Educativos -->
    <div class="video-container hidden" id="video-container">
        <div class="video-content">
            <h2>📺 Vídeos Educativos</h2>
            <p>Aprenda mais sobre sustentabilidade com esses vídeos!</p>
            
            <div class="video-wrapper">
                <iframe id="educational-video" width="560" height="315" src="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </div>
            
            <div class="video-options" style="display: flex; justify-content: center; gap: 10px; flex-wrap: wrap;">
                <button class="btn btn-water" onclick="playVideo('https://www.youtube.com/embed/9L5kGZ7Qj5I')">💧 Economia de Água</button>
                <button class="btn btn-energy" onclick="playVideo('https://www.youtube.com/embed/6stlCkUDG_s')">⚡ Energia Sustentável</button>
                <button class="btn btn-recycle" onclick="playVideo('https://www.youtube.com/embed/9L5kGZ7Qj5I')">♻️ Reciclagem</button>
            </div>
            
            <button class="btn" style="margin-top: 20px;" onclick="hideVideo()">Voltar</button>
        </div>
    </div>

    <!-- Certificado -->
    <div class="certificate-container hidden" id="certificate-container">
        <div class="certificate">
            <h2>Certificado Eco Herói</h2>
            <h3>Certificamos que</h3>
            
            <div class="name" id="certificate-name"></div>
            
            <p>Completou com sucesso o jogo Eco Kids Super, demonstrando conhecimento e compromisso com a sustentabilidade ambiental.</p>
            
            <p>Pontuação: <strong id="certificate-points">0</strong> pontos</p>
            <p>Nível alcançado: <strong id="certificate-level">1</strong></p>
            
            <div class="badges" id="certificate-badges">
                <!-- Medalhas serão adicionadas aqui -->
            </div>
            
            <p class="date" id="certificate-date"></p>
            
            <img class="seal" src="https://cdn-icons-png.flaticon.com/512/3652/3652191.png" alt="Selo">
            
            <button class="btn" style="margin-top: 30px;" onclick="hideCertificate()">Fechar</button>
            <button class="btn" onclick="printCertificate()">Imprimir Certificado</button>
        </div>
    </div>

    <script>
        // ======================
        // VARIÁVEIS GLOBAIS
        // ======================
        let points = 0;
        let lives = 3;
        let currentMission = 0;
        let gameLevel = 1;
        let selectedCharacter = "";
        let characterBonus = { water: 0, energy: 0, recycle: 0 };
        let quizAnswered = false;
        let currentQuizIndex = 0;
        let shuffledQuestions = [];
        
        // Configurações de dificuldade
        const difficultySettings = {
            1: { speed: 1, reward: 1, timeBonus: 0 },
            2: { speed: 1.5, reward: 1.2, timeBonus: 5 },
            3: { speed: 2, reward: 1.5, timeBonus: 10 },
            4: { speed: 2.5, reward: 2, timeBonus: 15 }
        };
        
        // Missões do jogo
        const missions = [
            { 
                task: "Conserte o vazamento na escola!", 
                villain: "Desperdício", 
                villainImg: "https://cdn-icons-png.flaticon.com/512/2784/2784487.png",
                points: 20,
                type: "water"
            },
            { 
                task: "Troque as lâmpadas por LEDs!", 
                villain: "Gastão", 
                villainImg: "https://cdn-icons-png.flaticon.com/512/3652/3652156.png",
                points: 25,
                type: "energy"
            },
            { 
                task: "Separe o lixo na sala de aula!", 
                villain: "Sujismundo", 
                villainImg: "https://cdn-icons-png.flaticon.com/512/484/484611.png",
                points: 30,
                type: "recycle"
            },
            { 
                task: "Reduza o tempo dos banhos!", 
                villain: "Desperdício", 
                villainImg: "https://cdn-icons-png.flaticon.com/512/2784/2784487.png",
                points: 25,
                type: "water"
            },
            { 
                task: "Desligue os aparelhos em standby!", 
                villain: "Gastão", 
                villainImg: "https://cdn-icons-png.flaticon.com/512/3652/3652156.png",
                points: 30,
                type: "energy"
            },
            { 
                task: "Plante árvores no parque da cidade!", 
                villain: "Poluição", 
                villainImg: "https://cdn-icons-png.flaticon.com/512/3079/3079158.png",
                points: 40,
                type: "both"
            }
        ];
        
        // Questionários
        const quizQuestions = [
            { 
                question: "Qual é o consumo médio de água em um banho de 15 minutos?", 
                options: ["45 litros", "135 litros", "270 litros"],
                answer: "135 litros",
                fact: "Um banho de 15 minutos pode gastar até 135 litros de água! Reduzir para 5 minutos economiza 90 litros.",
                explanation: "O chuveiro comum tem vazão média de 9 litros por minuto. Em 15 minutos, isso resulta em 135 litros. Reduzir o tempo do banho é uma das formas mais eficazes de economizar água."
            },
            { 
                question: "Qual dessas fontes de energia é considerada não renovável?", 
                options: ["Energia eólica", "Energia solar", "Energia nuclear"],
                answer: "Energia nuclear",
                fact: "A energia nuclear utiliza urânio, um recurso finito, enquanto eólica e solar são renováveis.",
                explanation: "Apesar de a energia nuclear ser limpa em termos de emissões, o urânio usado como combustível é um recurso finito na Terra, portanto não renovável. Energia eólica e solar são consideradas renováveis porque utilizam recursos naturais inesgotáveis."
            },
            { 
                question: "Quanto tempo leva para um plástico se decompor na natureza?", 
                options: ["10 anos", "100 anos", "450 anos"],
                answer: "450 anos",
                fact: "Plásticos podem levar até 450 anos para se decompor, causando grande impacto ambiental.",
                explanation: "O plástico é um material sintético que a natureza não consegue decompor facilmente. Garrafas PET, por exemplo, podem persistir no ambiente por até 450 anos, poluindo oceanos e prejudicando a vida marinha."
            }
        ];
        
        // Tipos de lixo para o mini game de reciclagem
        const trashItems = [
            { type: "orgânico", name: "Casca de banana", img: "https://cdn-icons-png.flaticon.com/512/3480/3480308.png" },
            { type: "orgânico", name: "Ossos", img: "https://cdn-icons-png.flaticon.com/512/2765/2765873.png" },
            { type: "orgânico", name: "Borras de café", img: "https://cdn-icons-png.flaticon.com/512/2936/2936886.png" },
            { type: "reciclável", name: "Garrafa PET", img: "https://cdn-icons-png.flaticon.com/512/2553/2553183.png" },
            { type: "reciclável", name: "Jornal", img: "https://cdn-icons-png.flaticon.com/512/2553/2553183.png" },
            { type: "reciclável", name: "Lata de alumínio", img: "https://cdn-icons-png.flaticon.com/512/2553/2553183.png" },
            { type: "lixo", name: "Papel higiênico", img: "https://cdn-icons-png.flaticon.com/512/484/484611.png" },
            { type: "lixo", name: "Fralda usada", img: "https://cdn-icons-png.flaticon.com/512/484/484611.png" }
        ];
        
        // ======================
        // FUNÇÕES DO JOGO
        // ======================
        
        // Mostra a tela de seleção de personagem
        function showCharacterSelection() {
            document.getElementById("start-screen").classList.add("hidden");
            document.getElementById("character-selection").classList.remove("hidden");
        }
        
        // Volta para a tela inicial
        function showStartScreen() {
            document.getElementById("character-selection").classList.add("hidden");
            document.getElementById("instructions-screen").classList.add("hidden");
            document.getElementById("start-screen").classList.remove("hidden");
        }
        
        // Mostra as instruções
        function showInstructions() {
            document.getElementById("start-screen").classList.add("hidden");
            document.getElementById("instructions-screen").classList.remove("hidden");
        }
        
        // Esconde as instruções
        function hideInstructions() {
            document.getElementById("instructions-screen").classList.add("hidden");
            document.getElementById("start-screen").classList.remove("hidden");
        }
        
        // Mostra dicas ecológicas
        function showEcoTips() {
            document.getElementById("eco-tips-container").classList.remove("hidden");
            document.getElementById("water-tip").classList.remove("hidden");
        }
        
        // Mostra a próxima dica ecológica
        function showNextTip(nextTipId) {
            document.querySelectorAll(".eco-tip").forEach(tip => {
                tip.classList.add("hidden");
            });
            document.getElementById(nextTipId).classList.remove("hidden");
        }
        
        // Esconde as dicas ecológicas
        function hideEcoTips() {
            document.getElementById("eco-tips-container").classList.add("hidden");
            document.querySelectorAll(".eco-tip").forEach(tip => {
                tip.classList.add("hidden");
            });
        }
        
        // Mostra vídeos educativos
        function showEducationalVideos() {
            document.getElementById("video-container").classList.remove("hidden");
            // Pausa qualquer vídeo que esteja tocando
            document.getElementById("educational-video").src = "";
        }
        
        // Reproduz um vídeo específico
        function playVideo(videoUrl) {
            document.getElementById("educational-video").src = videoUrl;
        }
        
        // Esconde os vídeos educativos
        function hideVideo() {
            document.getElementById("video-container").classList.add("hidden");
            // Pausa o vídeo
            document.getElementById("educational-video").src = "";
        }
        
        // Seleciona o personagem e inicia o jogo
        function selectCharacter(character) {
            selectedCharacter = character;
            document.getElementById("character-name").textContent = character;
            
            // Define bônus baseado no personagem
            if (character === "Gotinha") {
                characterBonus = { water: 2, energy: 0, recycle: 0 };
            } else if (character === "Solarzinho") {
                characterBonus = { water: 0, energy: 2, recycle: 0 };
            } else {
                characterBonus = { water: 0, energy: 0, recycle: 2 };
            }
            
            // Configura a imagem do herói
            const heroImg = character === "Gotinha" ? 
                "https://cdn-icons-png.flaticon.com/512/3430/3430255.png" : 
                character === "Solarzinho" ?
                "https://cdn-icons-png.flaticon.com/512/3659/3659898.png" :
                "https://cdn-icons-png.flaticon.com/512/2553/2553183.png";
            
            document.getElementById("hero").src = heroImg;
            
            // Inicia o jogo
            document.getElementById("character-selection").classList.add("hidden");
            document.getElementById("game-screen").classList.remove("hidden");
            
            // Configura o número total de missões
            document.getElementById("total-missions").textContent = missions.length;
            
            // Embaralha as perguntas do quiz
            shuffledQuestions = [...quizQuestions].sort(() => Math.random() - 0.5);
            
            updateGame();
        }
        
        // Atualiza a tela do jogo principal
        function updateGame() {
            if (currentMission >= missions.length) {
                endGame(true);
                return;
            }
            
            const mission = missions[currentMission];
            
            // Atualiza a interface
            document.getElementById("mission").textContent = mission.task;
            document.getElementById("villain-name").textContent = mission.villain;
            document.getElementById("mission-number").textContent = currentMission + 1;
            document.getElementById("villain").src = mission.villainImg;
            
            // Posiciona o vilão com animação
            document.getElementById("villain").style.right = "-100px";
            setTimeout(() => {
                document.getElementById("villain").style.right = "50px";
                document.getElementById("villain").style.transform = "scaleX(-1)";
            }, 500);
            
            // Atualiza barra de progresso
            const progress = (currentMission / missions.length) * 100;
            document.getElementById("progress-bar").style.width = `${progress}%`;
            
            // Atualiza nível
            document.getElementById("level").textContent = `Nível ${gameLevel}`;
            
            // Atualiza pontos
            document.getElementById("points").textContent = points;
            
            // Atualiza vidas
            updateHeartsDisplay();
        }
        
        // Atualiza a exibição das vidas
        function updateHeartsDisplay() {
            const heartsContainer = document.getElementById("hearts");
            heartsContainer.innerHTML = "";
            
            for (let i = 0; i < lives; i++) {
                const heart = document.createElement("span");
                heart.className = "heart";
                heart.textContent = "❤️";
                heartsContainer.appendChild(heart);
            }
        }
        
        // Completa uma missão
        function completeMission() {
            const mission = missions[currentMission];
            let pointsEarned = mission.points;
            
            // Aplica bônus do personagem
            if ((mission.type === "water" || mission.type === "both") && characterBonus.water > 0) {
                pointsEarned += characterBonus.water;
            }
            if ((mission.type === "energy" || mission.type === "both") && characterBonus.energy > 0) {
                pointsEarned += characterBonus.energy;
            }
            if ((mission.type === "recycle" || mission.type === "both") && characterBonus.recycle > 0) {
                pointsEarned += characterBonus.recycle;
            }
            
            // Aplica bônus de dificuldade
            pointsEarned = Math.floor(pointsEarned * difficultySettings[gameLevel].reward);
            
            points += pointsEarned;
            currentMission++;
            
            // Animação de pontos
            const pointsElement = document.getElementById("points");
            pointsElement.style.transform = "scale(1.5)";
            setTimeout(() => {
                pointsElement.style.transform = "scale(1)";
            }, 300);
            
            // Verifica se ganhou medalhas
            checkBadges();
            
            // Aumenta a dificuldade a cada 2 missões
            if (currentMission % 2 === 0 && gameLevel < 4) {
                gameLevel++;
                showLevelUpAlert();
            }
            
            // Alterna entre missões e questionários
            if (currentMission % 2 === 0 && currentMission < missions.length) {
                showQuiz();
            } else {
                updateGame();
            }
        }
        
        // Mostra alerta de aumento de nível
        function showLevelUpAlert() {
            const alertDiv = document.createElement("div");
            alertDiv.style.position = "fixed";
            alertDiv.style.top = "50%";
            alertDiv.style.left = "50%";
            alertDiv.style.transform = "translate(-50%, -50%)";
            alertDiv.style.backgroundColor = "var(--card-bg)";
            alertDiv.style.padding = "20px";
            alertDiv.style.borderRadius = "15px";
            alertDiv.style.boxShadow = "0 0 20px rgba(0,0,0,0.5)";
            alertDiv.style.zIndex = "1000";
            alertDiv.style.textAlign = "center";
            alertDiv.style.maxWidth = "80%";
            alertDiv.style.border = "2px solid var(--primary)";
            alertDiv.style.color = "var(--text)";
            
            alertDiv.innerHTML = `
                <h2 style="color: var(--primary);">🎉 Nível ${gameLevel} Desbloqueado!</h2>
                <p>Dificuldade aumentada! Você ganhou um bônus de ${difficultySettings[gameLevel].timeBonus}s em mini games.</p>
                <button class="btn" style="margin-top: 15px;" onclick="this.parentElement.remove()">Continuar</button>
            `;
            
            document.body.appendChild(alertDiv);
        }
        
        // Mostra um questionário
        function showQuiz() {
            document.getElementById("game-screen").classList.add("hidden");
            document.getElementById("quiz-screen").classList.remove("hidden");
            
            // Seleciona a próxima pergunta
            const question = shuffledQuestions[currentQuizIndex % shuffledQuestions.length];
            
            // Exibe a pergunta e o fato
            document.getElementById("quiz-question").textContent = question.question;
            document.getElementById("quiz-fact").textContent = "";
            document.getElementById("quiz-explanation").textContent = "";
            document.getElementById("quiz-explanation").style.display = "none";
            
            // Limpa feedback anterior
            document.getElementById("quiz-feedback").textContent = "";
            document.getElementById("quiz-feedback").className = "quiz-feedback";
            document.getElementById("next-question-btn").style.display = "none";
            
            // Cria as opções
            const optionsContainer = document.getElementById("quiz-options");
            optionsContainer.innerHTML = "";
            
            // Embaralha as opções
            const shuffledOptions = [...question.options].sort(() => Math.random() - 0.5);
            
            shuffledOptions.forEach(option => {
                const button = document.createElement("button");
                button.className = "option";
                button.textContent = option;
                button.onclick = function() {
                    if (!quizAnswered) {
                        checkQuizAnswer(option, question.answer, question.fact, question.explanation);
                    }
                };
                optionsContainer.appendChild(button);
            });
            
            quizAnswered = false;
        }
        
        // Mostra a próxima pergunta do quiz
        function showNextQuestion() {
            currentQuizIndex++;
            document.getElementById("next-question-btn").style.display = "none";
            showQuiz();
        }
        
        // Verifica a resposta do questionário
        function checkQuizAnswer(selected, correct, fact, explanation) {
            quizAnswered = true;
            const feedback = document.getElementById("quiz-feedback");
            const explanationDiv = document.getElementById("quiz-explanation");
            const options = document.querySelectorAll(".option");
            
            // Mostra o fato relacionado
            document.getElementById("quiz-fact").textContent = fact;
            
            // Mostra a explicação detalhada
            explanationDiv.textContent = explanation;
            explanationDiv.style.display = "block";
            
            // Marca as opções como corretas/incorretas
            options.forEach(option => {
                if (option.textContent === correct) {
                    option.classList.add("correct");
                } else if (option.textContent === selected && selected !== correct) {
                    option.classList.add("incorrect");
                }
                
                // Desativa os cliques
                option.onclick = null;
            });
            
            if (selected === correct) {
                feedback.textContent = `✅ Correto! +10 pontos!`;
                feedback.className = "quiz-feedback correct";
                points += 10;
                createConfetti();
            } else {
                feedback.textContent = `❌ Errado! A resposta correta é "${correct}".`;
                feedback.className = "quiz-feedback incorrect";
                loseLife();
            }
            
            // Atualiza pontos
            document.getElementById("points").textContent = points;
            
            // Verifica medalhas
            checkBadges();
            
            // Mostra o botão para próxima pergunta
            document.getElementById("next-question-btn").style.display = "inline-block";
        }
        
        // Volta ao jogo principal
        function returnToGame() {
            document.getElementById("quiz-screen").classList.add("hidden");
            document.getElementById("mini-games-menu").classList.add("hidden");
            document.getElementById("faucet-game").classList.add("hidden");
            document.getElementById("solar-runner-game").classList.add("hidden");
            document.getElementById("recycle-game").classList.add("hidden");
            
            document.getElementById("game-screen").classList.remove("hidden");
            updateGame();
        }
        
        // Mostra o menu de mini games
        function showMiniGamesMenu() {
            document.getElementById("game-screen").classList.add("hidden");
            document.getElementById("mini-games-menu").classList.remove("hidden");
        }
        
        // Inicia um mini game específico
        function startMiniGame(gameType) {
            document.getElementById("mini-games-menu").classList.add("hidden");
            
            switch(gameType) {
                case 'faucet':
                    startFaucetGame();
                    break;
                case 'solar-runner':
                    startSolarRunnerGame();
                    break;
                case 'recycle':
                    startRecycleGame();
                    break;
            }
        }
        
        // ======================
        // MINI GAME 1: FECHE A TORNEIRA
        // ======================
        function startFaucetGame() {
            document.getElementById("faucet-game").classList.remove("hidden");
            document.getElementById("faucets-closed").textContent = "0";
            
            // Ajusta vidas baseado no personagem
            let gameLives = selectedCharacter === "Gotinha" ? lives + 1 : lives;
            document.getElementById("faucet-lives").textContent = gameLives;
            document.getElementById("faucet-level").textContent = gameLevel;
            
            let faucetsClosed = 0;
            let timeLeft = 30 + difficultySettings[gameLevel].timeBonus;
            let faucetInterval;
            let villainInterval;
            let timerInterval;
            
            const container = document.getElementById("faucet-container");
            container.innerHTML = "";
            
            // Configura o timer circular
            const timerPath = document.getElementById("faucet-timer-path");
            const timerText = document.getElementById("faucet-time");
            timerText.textContent = timeLeft;
            
            // Atualiza o tempo
            timerInterval = setInterval(() => {
                timeLeft--;
                timerText.textContent = timeLeft;
                const progress = (timeLeft / (30 + difficultySettings[gameLevel].timeBonus)) * 100;
                timerPath.setAttribute("stroke-dasharray", `${progress}, 100`);
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    clearInterval(faucetInterval);
                    clearInterval(villainInterval);
                    endFaucetGame(faucetsClosed);
                }
            }, 1000);
            
            // Cria torneiras vazando
            faucetInterval = setInterval(() => {
                createFaucet();
            }, 1500 - (gameLevel * 200)); // Aumenta dificuldade
            
            // O vilão abre torneiras
            villainInterval = setInterval(() => {
                if (Math.random() > 0.6) {
                    createVillainFaucet();
                }
            }, 4000 - (gameLevel * 600)); // Aumenta dificuldade
            
            function createFaucet() {
                const faucet = document.createElement("img");
                faucet.className = "faucet";
                faucet.src = "https://cdn-icons-png.flaticon.com/512/3213/3213116.png";
                faucet.style.left = `${Math.random() * 80 + 10}%`;
                faucet.style.top = `${Math.random() * 50 + 10}%`;
                
                // Cria gotas de água caindo
                createWaterDrops(faucet);
                
                faucet.onclick = function() {
                    faucetsClosed++;
                    document.getElementById("faucets-closed").textContent = faucetsClosed;
                    this.src = "https://cdn-icons-png.flaticon.com/512/3213/3213114.png";
                    this.className = "faucet faucet-closed";
                    this.onclick = null;
                    
                    // Remove as gotas de água
                    const drops = document.querySelectorAll(".water-drop");
                    drops.forEach(drop => {
                        if (drop.parentNode) drop.remove();
                    });
                    
                    // Efeito de confete
                    createConfetti(this);
                };
                
                container.appendChild(faucet);
                
                // Remove torneira após 3 segundos se não for fechada
                setTimeout(() => {
                    if (faucet.parentNode && !faucet.classList.contains("faucet-closed")) {
                        faucet.remove();
                        gameLives--;
                        document.getElementById("faucet-lives").textContent = gameLives;
                        
                        // Efeito de dano
                        container.style.animation = "shake 0.5s";
                        setTimeout(() => {
                            container.style.animation = "";
                        }, 500);
                        
                        if (gameLives <= 0) {
                            clearInterval(timerInterval);
                            clearInterval(faucetInterval);
                            clearInterval(villainInterval);
                            endFaucetGame(faucetsClosed);
                        }
                    }
                }, 3000);
            }
            
            function createWaterDrops(faucet) {
                const dropInterval = setInterval(() => {
                    if (!faucet.parentNode || faucet.classList.contains("faucet-closed")) {
                        clearInterval(dropInterval);
                        return;
                    }
                    
                    const drop = document.createElement("div");
                    drop.className = "water-drop";
                    const faucetRect = faucet.getBoundingClientRect();
                    const containerRect = container.getBoundingClientRect();
                    
                    drop.style.left = `${faucetRect.left - containerRect.left + faucetRect.width/2 - 5}px`;
                    drop.style.top = `${faucetRect.top - containerRect.top + faucetRect.height}px`;
                    
                    container.appendChild(drop);
                    
                    // Animação da gota caindo
                    let dropTop = parseFloat(drop.style.top);
                    const fall = setInterval(() => {
                        dropTop += 5;
                        drop.style.top = `${dropTop}px`;
                        
                        if (dropTop > container.offsetHeight || !drop.parentNode) {
                            clearInterval(fall);
                            if (drop.parentNode) drop.remove();
                        }
                    }, 50);
                    
                }, 300);
            }
            
            function createVillainFaucet() {
                const villainFaucet = document.createElement("img");
                villainFaucet.className = "faucet";
                villainFaucet.src = "https://cdn-icons-png.flaticon.com/512/2784/2784487.png";
                villainFaucet.style.left = `${Math.random() * 80 + 10}%`;
                villainFaucet.style.top = `${Math.random() * 50 + 10}%`;
                villainFaucet.style.animation = "shake 0.5s infinite";
                
                // Cria gotas de água caindo mais rápido
                createWaterDrops(villainFaucet, 150);
                
                villainFaucet.onclick = function() {
                    faucetsClosed += 3; // Bônus maior por fechar torneira do vilão
                    document.getElementById("faucets-closed").textContent = faucetsClosed;
                    this.remove();
                    
                    // Remove as gotas de água
                    const drops = document.querySelectorAll(".water-drop");
                    drops.forEach(drop => {
                        if (drop.parentNode) drop.remove();
                    });
                    
                    // Efeito de confete extra
                    createConfetti(this);
                    setTimeout(() => createConfetti(this), 300);
                    setTimeout(() => createConfetti(this), 600);
                };
                
                container.appendChild(villainFaucet);
                
                // Remove após 2 segundos se não for fechada
                setTimeout(() => {
                    if (villainFaucet.parentNode) {
                        villainFaucet.remove();
                        gameLives--;
                        document.getElementById("faucet-lives").textContent = gameLives;
                        
                        // Efeito de dano
                        container.style.animation = "shake 0.5s";
                        setTimeout(() => {
                            container.style.animation = "";
                        }, 500);
                        
                        if (gameLives <= 0) {
                            clearInterval(timerInterval);
                            clearInterval(faucetInterval);
                            clearInterval(villainInterval);
                            endFaucetGame(faucetsClosed);
                        }
                    }
                }, 2000);
            }
            
            window.endFaucetGame = function(faucetsClosed) {
                // Calcula pontos (baseado em torneiras fechadas e nível)
                const pointsEarned = Math.floor(faucetsClosed * 2 * difficultySettings[gameLevel].reward);
                points += pointsEarned;
                
                // Atualiza pontos
                document.getElementById("points").textContent = points;
                
                // Verifica medalhas
                checkBadges();
                
                // Mostra resultado
                const resultMessage = faucetsClosed > 0 ? 
                    `Você fechou ${faucetsClosed} torneiras e ganhou ${pointsEarned} pontos!` :
                    "Tente novamente e feche mais torneiras!";
                
                showMiniGameResult("Feche a Torneira", resultMessage, pointsEarned);
            };
        }
        
        // ======================
        // MINI GAME 2: CORRIDA SOLAR
        // ======================
        function startSolarRunnerGame() {
            document.getElementById("solar-runner-game").classList.remove("hidden");
            document.getElementById("energy-collected").textContent = "0";
            
            // Ajusta vidas baseado no personagem
            let gameLives = selectedCharacter === "Solarzinho" ? lives + 1 : lives;
            document.getElementById("runner-lives").textContent = gameLives;
            document.getElementById("runner-speed").textContent = difficultySettings[gameLevel].speed + "x";
            
            const runner = document.getElementById("runner");
            const gameArea = document.getElementById("solar-runner");
            gameArea.innerHTML = "";
            gameArea.appendChild(runner);
            
            let runnerPosition = 50;
            let energyCount = 0;
            let timeLeft = 30 + difficultySettings[gameLevel].timeBonus;
            let runnerInterval;
            let obstacleInterval;
            let energyInterval;
            let timerInterval;
            
            // Configura o timer circular
            const timerPath = document.getElementById("runner-timer-path");
            const timerText = document.getElementById("runner-time");
            timerText.textContent = timeLeft;
            
            // Atualiza o tempo
            timerInterval = setInterval(() => {
                timeLeft--;
                timerText.textContent = timeLeft;
                const progress = (timeLeft / (30 + difficultySettings[gameLevel].timeBonus)) * 100;
                timerPath.setAttribute("stroke-dasharray", `${progress}, 100`);
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    clearInterval(energyInterval);
                    clearInterval(obstacleInterval);
                    endSolarRunnerGame(energyCount);
                }
            }, 1000);
            
            // Configura controles
            document.addEventListener("keydown", function(e) {
                if (e.key === "ArrowLeft" && runnerPosition > 0) {
                    runnerPosition -= 10;
                } else if (e.key === "ArrowRight" && runnerPosition < window.innerWidth - 100) {
                    runnerPosition += 10;
                }
                runner.style.left = `${runnerPosition}px`;
            });
            
            // Cria energia solar
            energyInterval = setInterval(() => {
                createEnergy();
            }, 1200 / difficultySettings[gameLevel].speed);
            
            // Cria obstáculos
            obstacleInterval = setInterval(() => {
                createObstacle();
            }, 1800 / difficultySettings[gameLevel].speed);
            
            function createEnergy() {
                const energy = document.createElement("img");
                energy.className = "energy";
                energy.src = "https://cdn-icons-png.flaticon.com/512/2936/2936886.png";
                energy.style.left = `${Math.random() * 80 + 10}px`;
                energy.style.top = "0";
                
                gameArea.appendChild(energy);
                
                // Animação de queda
                let fallSpeed = 2 + gameLevel * 0.5;
                let energyPosition = 0;
                
                const fall = setInterval(() => {
                    energyPosition += fallSpeed;
                    energy.style.top = `${energyPosition}px`;
                    
                    // Verifica se pegou a energia
                    const energyRect = energy.getBoundingClientRect();
                    const runnerRect = runner.getBoundingClientRect();
                    
                    if (
                        energyRect.top + energyRect.height > runnerRect.top &&
                        energyRect.left + energyRect.width > runnerRect.left &&
                        energyRect.left < runnerRect.left + runnerRect.width
                    ) {
                        energyCount++;
                        document.getElementById("energy-collected").textContent = energyCount;
                        energy.remove();
                        clearInterval(fall);
                        createConfetti(energy);
                    }
                    
                    // Remove se sair da tela
                    if (energyPosition > gameArea.offsetHeight || !energy.parentNode) {
                        clearInterval(fall);
                        if (energy.parentNode) {
                            energy.remove();
                        }
                    }
                }, 20);
            }
            
            function createObstacle() {
                const obstacle = document.createElement("img");
                obstacle.className = "obstacle";
                obstacle.src = "https://cdn-icons-png.flaticon.com/512/2784/2784487.png";
                obstacle.style.left = `${Math.random() * 80 + 10}px`;
                obstacle.style.top = "0";
                
                gameArea.appendChild(obstacle);
                
                // Animação de queda
                let fallSpeed = 3 + gameLevel * 0.5;
                let obstaclePosition = 0;
                
                const fall = setInterval(() => {
                    obstaclePosition += fallSpeed;
                    obstacle.style.top = `${obstaclePosition}px`;
                    
                    // Verifica colisão com o jogador
                    const obstacleRect = obstacle.getBoundingClientRect();
                    const runnerRect = runner.getBoundingClientRect();
                    
                    if (
                        obstacleRect.top + obstacleRect.height > runnerRect.top &&
                        obstacleRect.left + obstacleRect.width > runnerRect.left &&
                        obstacleRect.left < runnerRect.left + runnerRect.width
                    ) {
                        gameLives--;
                        document.getElementById("runner-lives").textContent = gameLives;
                        obstacle.remove();
                        clearInterval(fall);
                        
                        // Efeito de dano
                        runner.style.animation = "shake 0.5s";
                        setTimeout(() => {
                            runner.style.animation = "";
                        }, 500);
                        
                        if (gameLives <= 0) {
                            clearInterval(timerInterval);
                            clearInterval(energyInterval);
                            clearInterval(obstacleInterval);
                            endSolarRunnerGame(energyCount);
                        }
                    }
                    
                    // Remove se sair da tela
                    if (obstaclePosition > gameArea.offsetHeight || !obstacle.parentNode) {
                        clearInterval(fall);
                        if (obstacle.parentNode) {
                            obstacle.remove();
                        }
                    }
                }, 20);
            }
            
            window.endSolarRunnerGame = function(energyCount) {
                // Calcula pontos (baseado em energia coletada e nível)
                const pointsEarned = Math.floor(energyCount * 3 * difficultySettings[gameLevel].reward);
                points += pointsEarned;
                
                // Atualiza pontos
                document.getElementById("points").textContent = points;
                
                // Verifica medalhas
                checkBadges();
                
                // Mostra resultado
                const resultMessage = energyCount > 0 ? 
                    `Você coletou ${energyCount} energias solares e ganhou ${pointsEarned} pontos!` :
                    "Tente novamente e colete mais energia solar!";
                
                showMiniGameResult("Corrida Solar", resultMessage, pointsEarned);
            };
        }
        
        // ======================
        // MINI GAME 3: SEPARE O LIXO
        // ======================
        function startRecycleGame() {
            document.getElementById("recycle-game").classList.remove("hidden");
            document.getElementById("recycle-score").textContent = "0";
            document.getElementById("recycle-errors").textContent = "0";
            document.getElementById("recycle-level").textContent = gameLevel;
            
            let score = 0;
            let errors = 0;
            let timeLeft = 60 + (selectedCharacter === "Reciclinho" ? 10 : 0) + difficultySettings[gameLevel].timeBonus;
            let currentTrash = null;
            
            const container = document.getElementById("trash-items-container");
            container.innerHTML = "";
            
            // Configura o timer circular
            const timerPath = document.getElementById("recycle-timer-path");
            const timerText = document.getElementById("recycle-time");
            timerText.textContent = timeLeft;
            
            // Atualiza o tempo
            const timerInterval = setInterval(() => {
                timeLeft--;
                timerText.textContent = timeLeft;
                const progress = (timeLeft / (60 + (selectedCharacter === "Reciclinho" ? 10 : 0) + difficultySettings[gameLevel].timeBonus)) * 100;
                timerPath.setAttribute("stroke-dasharray", `${progress}, 100`);
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    clearInterval(trashInterval);
                    endRecycleGame(score, errors);
                }
            }, 1000);
            
            // Cria lixo periodicamente
            const trashInterval = setInterval(() => {
                createTrash();
            }, 2000 / difficultySettings[gameLevel].speed);
            
            function createTrash() {
                if (document.querySelectorAll(".trash-item").length >= 5 + gameLevel) return;
                
                const trash = trashItems[Math.floor(Math.random() * trashItems.length)];
                const trashItem = document.createElement("img");
                trashItem.className = "trash-item";
                trashItem.src = trash.img;
                trashItem.dataset.type = trash.type;
                trashItem.title = trash.name;
                trashItem.style.left = `${Math.random() * 80 + 10}%`;
                trashItem.style.top = `${Math.random() * 30}%`;
                trashItem.draggable = true;
                
                // Configura arrastar e soltar
                trashItem.addEventListener("dragstart", function(e) {
                    currentTrash = this;
                    e.dataTransfer.setData("text/plain", this.dataset.type);
                    
                    // Destaca a lixeira correta
                    const bins = document.querySelectorAll(".trash-bin");
                    bins.forEach(bin => {
                        bin.classList.remove("highlight");
                        if (bin.id === `${this.dataset.type}-bin`) {
                            bin.classList.add("highlight");
                        }
                    });
                });
                
                container.appendChild(trashItem);
            }
            
            // Configura lixeiras para receber lixo
            const bins = document.querySelectorAll(".trash-bin");
            bins.forEach(bin => {
                bin.addEventListener("dragover", function(e) {
                    e.preventDefault();
                });
                
                bin.addEventListener("drop", function(e) {
                    e.preventDefault();
                    if (currentTrash) {
                        const binType = this.id.replace("-bin", "");
                        
                        // Remove o destaque das lixeiras
                        bins.forEach(b => b.classList.remove("highlight"));
                        
                        if (currentTrash.dataset.type === binType) {
                            // Acertou
                            score++;
                            document.getElementById("recycle-score").textContent = score;
                            createConfetti(currentTrash);
                        } else {
                            // Errou
                            errors++;
                            document.getElementById("recycle-errors").textContent = errors;
                            loseLife();
                            
                            if (lives <= 0) {
                                clearInterval(timerInterval);
                                clearInterval(trashInterval);
                                endRecycleGame(score, errors);
                                return;
                            }
                        }
                        
                        currentTrash.remove();
                        currentTrash = null;
                    }
                });
            });
            
            window.endRecycleGame = function(score, errors) {
                // Calcula pontos (baseado em acertos e nível)
                const pointsEarned = Math.floor(score * 4 * difficultySettings[gameLevel].reward - errors);
                points += Math.max(0, pointsEarned); // Não permite pontos negativos
                
                // Atualiza pontos
                document.getElementById("points").textContent = points;
                
                // Verifica medalhas
                checkBadges();
                
                // Mostra resultado
                const resultMessage = score > 0 ? 
                    `Você acertou ${score} itens, errou ${errors} e ganhou ${pointsEarned} pontos!` :
                    "Tente novamente e acerte mais itens!";
                
                showMiniGameResult("Separe o Lixo", resultMessage, pointsEarned);
            };
        }
        
        // Mostra o resultado do mini game
        function showMiniGameResult(gameName, message, pointsEarned) {
            const resultDiv = document.createElement("div");
            resultDiv.style.position = "fixed";
            resultDiv.style.top = "50%";
            resultDiv.style.left = "50%";
            resultDiv.style.transform = "translate(-50%, -50%)";
            resultDiv.style.backgroundColor = "var(--card-bg)";
            resultDiv.style.padding = "20px";
            resultDiv.style.borderRadius = "15px";
            resultDiv.style.boxShadow = "0 0 20px rgba(0,0,0,0.5)";
            resultDiv.style.zIndex = "1000";
            resultDiv.style.textAlign = "center";
            resultDiv.style.maxWidth = "80%";
            resultDiv.style.border = "2px solid var(--primary)";
            resultDiv.style.color = "var(--text)";
            
            resultDiv.innerHTML = `
                <h2 style="color: var(--primary);">${gameName}</h2>
                <p>${message}</p>
                <p style="font-weight: bold; margin: 15px 0;">+${pointsEarned} pontos!</p>
                <button class="btn" onclick="this.parentElement.remove(); returnToGame()">Continuar</button>
            `;
            
            document.body.appendChild(resultDiv);
        }
        
        // Finaliza qualquer mini game
        function endMiniGame() {
            if (typeof window.endFaucetGame === 'function') window.endFaucetGame(0);
            if (typeof window.endSolarRunnerGame === 'function') window.endSolarRunnerGame(0);
            if (typeof window.endRecycleGame === 'function') window.endRecycleGame(0, 0);
            returnToGame();
        }
        
        // ======================
        // FUNÇÕES AUXILIARES
        // ======================
        
        // Verifica se o jogador ganhou medalhas
        function checkBadges() {
            // Medalha de água
            if (points >= 50 && !document.getElementById("water-badge").classList.contains("earned")) {
                document.getElementById("water-badge").style.backgroundImage = "url('https://cdn-icons-png.flaticon.com/512/3213/3213114.png')";
                document.getElementById("water-badge").classList.add("earned");
                showBadgeUnlocked("Guardião das Águas", "Você ganhou a medalha Guardião das Águas!");
            }
            
            // Medalha de energia
            if (points >= 100 && !document.getElementById("energy-badge").classList.contains("earned")) {
                document.getElementById("energy-badge").style.backgroundImage = "url('https://cdn-icons-png.flaticon.com/512/3659/3659898.png')";
                document.getElementById("energy-badge").classList.add("earned");
                showBadgeUnlocked("Mestre da Energia", "Você ganhou a medalha Mestre da Energia!");
            }
            
            // Medalha de reciclagem
            if (points >= 150 && !document.getElementById("recycle-badge").classList.contains("earned")) {
                document.getElementById("recycle-badge").style.backgroundImage = "url('https://cdn-icons-png.flaticon.com/512/2553/2553183.png')";
                document.getElementById("recycle-badge").classList.add("earned");
                showBadgeUnlocked("Reciclador Expert", "Você ganhou a medalha Reciclador Expert!");
            }
            
            // Medalha de herói
            if (currentMission >= missions.length && !document.getElementById("hero-badge").classList.contains("earned")) {
                document.getElementById("hero-badge").style.backgroundImage = "url('https://cdn-icons-png.flaticon.com/512/3652/3652191.png')";
                document.getElementById("hero-badge").classList.add("earned");
            }
        }
        
        // Mostra alerta de medalha desbloqueada
        function showBadgeUnlocked(title, message) {
            const badgeDiv = document.createElement("div");
            badgeDiv.style.position = "fixed";
            badgeDiv.style.top = "50%";
            badgeDiv.style.left = "50%";
            badgeDiv.style.transform = "translate(-50%, -50%)";
            badgeDiv.style.backgroundColor = "var(--card-bg)";
            badgeDiv.style.padding = "20px";
            badgeDiv.style.borderRadius = "15px";
            badgeDiv.style.boxShadow = "0 0 20px rgba(0,0,0,0.5)";
            badgeDiv.style.zIndex = "1000";
            badgeDiv.style.textAlign = "center";
            badgeDiv.style.maxWidth = "80%";
            badgeDiv.style.border = "2px solid var(--primary)";
            badgeDiv.style.color = "var(--text)";
            
            badgeDiv.innerHTML = `
                <h2 style="color: var(--primary);">🏆 ${title}</h2>
                <p>${message}</p>
                <div style="width: 100px; height: 100px; margin: 15px auto; background-image: url('${document.getElementById(title.toLowerCase().replace(" ", "-") + "-badge").style.backgroundImage}'); background-size: contain; background-repeat: no-repeat; background-position: center;"></div>
                <button class="btn" onclick="this.parentElement.remove()">Continuar</button>
            `;
            
            document.body.appendChild(badgeDiv);
            createConfetti();
        }
        
        // Perde uma vida
        function loseLife() {
            const hearts = document.querySelectorAll(".heart");
            for (let i = hearts.length - 1; i >= 0; i--) {
                if (!hearts[i].classList.contains("lost")) {
                    hearts[i].classList.add("lost");
                    break;
                }
            }
            
            lives--;
            
            // Efeito de tela tremendo
            document.body.style.animation = "shake 0.5s";
            setTimeout(() => {
                document.body.style.animation = "";
            }, 500);
            
            // Verifica game over
            if (lives <= 0) {
                setTimeout(() => {
                    endGame(false);
                }, 1000);
            }
        }
        
        // Cria efeito de confete
        function createConfetti(element = null) {
            const colors = ["#FFC107", "#F44336", "#2196F3", "#8BC34A", "#FF9800"];
            const container = element || document.body;
            const rect = container.getBoundingClientRect();
            
            for (let i = 0; i < 15; i++) {
                const confetti = document.createElement("div");
                confetti.className = "confetti";
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.width = `${Math.random() * 10 + 5}px`;
                confetti.style.height = `${Math.random() * 10 + 5}px`;
                confetti.style.borderRadius = Math.random() > 0.5 ? "50%" : "0";
                confetti.style.left = `${(element ? 
                    (rect.left + Math.random() * rect.width) : 
                    (Math.random() * window.innerWidth))}px`;
                confetti.style.top = `${(element ? 
                    (rect.top + Math.random() * rect.height) : 
                    (Math.random() * window.innerHeight))}px`;
                
                document.body.appendChild(confetti);
                
                // Animação
                const angle = Math.random() * Math.PI * 2;
                const velocity = 3 + Math.random() * 3;
                const rotation = Math.random() * 360;
                const rotationSpeed = Math.random() * 10;
                
                let posX = parseFloat(confetti.style.left);
                let posY = parseFloat(confetti.style.top);
                let opacity = 1;
                let currentRotation = 0;
                
                const animate = () => {
                    posX += Math.cos(angle) * velocity;
                    posY += Math.sin(angle) * velocity + 1; // Gravidade
                    opacity -= 0.02;
                    currentRotation += rotationSpeed;
                    
                    confetti.style.left = `${posX}px`;
                    confetti.style.top = `${posY}px`;
                    confetti.style.opacity = opacity;
                    confetti.style.transform = `rotate(${currentRotation}deg)`;
                    
                    if (opacity > 0) {
                        requestAnimationFrame(animate);
                    } else {
                        confetti.remove();
                    }
                };
                
                requestAnimationFrame(animate);
            }
        }
        
        // Finaliza o jogo
        function endGame(win) {
            document.getElementById("game-screen").classList.add("hidden");
            document.getElementById("result-screen").classList.remove("hidden");
            
            if (win) {
                document.getElementById("result-title").textContent = "🏆 Parabéns, Eco Herói!";
                document.getElementById("result-message").textContent = 
                    "Você completou todas as missões e salvou o planeta!";
                
                // Mostra todas as medalhas conquistadas
                const badgesContainer = document.getElementById("final-badges");
                badgesContainer.innerHTML = "";
                
                const badges = document.querySelectorAll(".badge.earned");
                badges.forEach(badge => {
                    const badgeClone = document.createElement("div");
                    badgeClone.className = "final-badge";
                    badgeClone.style.backgroundImage = badge.style.backgroundImage;
                    badgeClone.title = badge.title;
                    badgesContainer.appendChild(badgeClone);
                });
                
                // Confete de vitória
                for (let i = 0; i < 50; i++) {
                    setTimeout(() => {
                        createConfetti();
                    }, i * 100);
                }
            } else {
                document.getElementById("result-title").textContent = "💔 Fim de Jogo";
                document.getElementById("result-message").textContent = 
                    "Tente novamente e seja mais sustentável!";
            }
            
            // Atualiza pontos e nível
            document.getElementById("final-points").textContent = points;
            document.getElementById("final-level").textContent = gameLevel;
            document.getElementById("final-missions").textContent = currentMission;
        }
        
        // Mostra o certificado
        function showCertificate() {
            document.getElementById("certificate-container").classList.remove("hidden");
            
            // Preenche os dados do certificado
            document.getElementById("certificate-name").textContent = selectedCharacter;
            document.getElementById("certificate-points").textContent = points;
            document.getElementById("certificate-level").textContent = gameLevel;
            
            // Adiciona a data atual
            const today = new Date();
            const options = { day: '2-digit', month: 'long', year: 'numeric' };
            document.getElementById("certificate-date").textContent = `Emitido em ${today.toLocaleDateString('pt-BR', options)}`;
            
            // Adiciona as medalhas conquistadas
            const badgesContainer = document.getElementById("certificate-badges");
            badgesContainer.innerHTML = "";
            
            const badges = document.querySelectorAll(".badge.earned");
            badges.forEach(badge => {
                const badgeElement = document.createElement("div");
                badgeElement.className = "badge";
                badgeElement.style.backgroundImage = badge.style.backgroundImage;
                badgeElement.title = badge.title;
                badgesContainer.appendChild(badgeElement);
            });
        }
        
        // Esconde o certificado
        function hideCertificate() {
            document.getElementById("certificate-container").classList.add("hidden");
        }
        
        // Imprime o certificado
        function printCertificate() {
            const printContents = document.getElementById("certificate-container").innerHTML;
            const originalContents = document.body.innerHTML;
            
            document.body.innerHTML = printContents;
            window.print();
            document.body.innerHTML = originalContents;
            document.getElementById("certificate-container").classList.remove("hidden");
        }
        
        // Reinicia o jogo
        function restartGame() {
            points = 0;
            lives = 3;
            currentMission = 0;
            gameLevel = 1;
            currentQuizIndex = 0;
            shuffledQuestions = [...quizQuestions].sort(() => Math.random() - 0.5);
            
            // Atualiza interface
            document.getElementById("points").textContent = "0";
            updateHeartsDisplay();
            document.getElementById("progress-bar").style.width = "0%";
            document.getElementById("result-screen").classList.add("hidden");
            document.getElementById("final-badges").innerHTML = "";
            
            // Reseta medalhas
            document.querySelectorAll(".badge").forEach(badge => {
                badge.classList.remove("earned");
                badge.style.backgroundImage = "";
            });
            
            // Volta para a tela inicial
            document.getElementById("start-screen").classList.remove("hidden");
        }
        
        // Inicializa o jogo
        document.getElementById("total-missions").textContent = missions.length;
    </script>
</body>
</html>
